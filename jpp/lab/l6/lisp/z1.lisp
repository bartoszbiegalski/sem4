(defun binomial (n k)
  (cond ((= k 0) 1)
        ((= n k) 1)
        ((< n k) 0)
        (t (+ (binomial (- n 1) (- k 1)) (binomial (- n 1) k)))
  )
)

(defun addList (a b)
  (cond ((null a) (b))
        ((null b) (a))
        (t        (cons (+ (car a) (car b)) (addList (cdr a) (cdr b))))
  )
)

(defun binomial2 (n k)
  (labels ((bin2 (n)
             (cond ((= n 0) '(1))
                   (t (addList (append '(0) (bin2 (- n 1)))
                               (append (bin2 (- n 1)) '(0)))))))
    (nth k (bin2 n))
  )
)

(defun merge (xs ys)
  (cond ((null xs) ys)
        ((null ys) xs)
        (t (if (< (car xs) (car ys))
               (cons (car xs) (merge (cdr xs) ys))
               (cons (car ys) (merge xs (cdr ys)))))
  )
)

(defun mergesort (lst)
  (cond ((null (cdr lst)) lst)
        (t (let ((half (floor (length lst) 2)))
             (merge (mergesort (subseq lst 0 half))
                    (mergesort (subseq lst half)))))
  )
)

(defun db (a b)
  (if (= a 0)
    (list 0 1 b)
     (let ((result (db (mod b a) a)))
      (destructuring-bind (s x g) result
       (list (- x (* (floor b a) s)) s g)))
  )
)

(defun prime_factors (n)
  (labels ((prime_factors_subroutine (n k)
             (cond ((= n k) (list k))
                   ((= n 0) nil)
                   ((= (mod n k) 0) (cons k (prime_factors_subroutine (floor n k) k)))
                   (t (prime_factors_subroutine n (+ k 1))))))
    (cond ((<= n 1) nil)
          (t (prime_factors_subroutine n 2)))
  )
)


(defun totient (n)
  (labels ((tot (n k)
             (cond ((= n k) 0)
                   ((= 1 (gcd n k)) (+ 1 (tot n (1+ k))))
                   (t (tot n (+ k 1))))))
  (tot n 1)
  )
)


(defun isprime (n)
  (labels ((prime_loop (n k)
            (cond ((<= n 1) 0)
                  ((= n k)  1)
                  ((= (mod n k) 0) 0)
                  (t (prime_loop n (+ k 1)))
            )))
   (prime_loop n 2)
  )
)

(defun primes (n)
  (cond ((= n 1) nil)
        (t (cond ((= (isprime n) 1) (cons n (primes (- n 1))))
                 (t (primes (- n 1)))))))
